//include classpath("boot.conf")

secret-key = "secret"
secret-key = ${?SECRET_KEY}

logger.scala.slick = INFO
//logger.scala.slick = DEBUG
logger.scala.slick.jdbc.JdbcBackend.statement = DEBUG


akka.http {
  server {
    port = 8080
  }
  server.parsing.illegal-header-warnings = on
  client.parsing.illegal-header-warnings = on
  caching {
    initialCapacity: 25
    maxCapacity = 50
    timeToLive = 20
    timeToIdle = 10
  }
  host-connection-pool.max-open-requests = 64
  loglevel = "DEBUG"
}

server {
  host: "localhost"
  host = ${?API_SERVER_HOST}
  version: "v01"
  port: 8080
  initialization-timeout: 5
}

database = {
  connectionPool = "HikariCP" //use HikariCP for our connection pool
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
  driver = "org.postgresql.Driver"
  profile = "slick.jdbc.PostgresProfile$"
  //  url = "jdbc:postgresql://localhost:5435/skeletondb",
  properties {
    serverName = "localhost"
    serverName = ${?POSTGRES_SERVER_NAME}
    portNumber = 5435
    portNumber = ${?POSTGRES_SERVER_PORT}
    databaseName = "skeletondb"
    databaseName = ${?POSTGRES_DB_NAME}
    user = "skeletondb"
    user = ${?POSTGRES_DB_USER}
    password = "skeletondb"
    password = ${?POSTGRES_DB_PASSWORD}
  }
  numThreads = 10
}

authentication {
  token: {
    prefix: "Bearer "
    secret: "super_secret_key"
    access: 3600
    refresh: 86400
  }
  roles: ["admin", "developer", "client"]
}

kamon {
  prometheus {

    start-embedded-http-server = yes
    include-environment-tags = yes

    embedded-server {
      hostname = 0.0.0.0
      port = 9095
    }

    buckets {
      default-buckets = [
        10,
        30,
        100,
        300,
        1000,
        3000,
        10000,
        30000,
        100000
      ]

      time-buckets = [
        0.005,
        0.01,
        0.025,
        0.05,
        0.075,
        0.1,
        0.25,
        0.5,
        0.75,
        1,
        2.5,
        5,
        7.5,
        10
      ]

      information-buckets = [
        512,
        1024,
        2048,
        4096,
        16384,
        65536,
        524288,
        1048576
      ]

    }

  }
  modules {
    prometheus-reporter {
      enabled = true
      name = "Prometheus Reporter"
      description = "Exposes a scrape endpoint for Prometheus"
      factory = "kamon.prometheus.PrometheusReporter$Factory"
    }
  }

  jaeger {

    # Define the host/port where the Jaeger Collector/Agent is listening.
    host = "localhost"
    port = 14268

    # Protocol used to send data to Jaeger. The available options are:
    #   - http: Sends spans using jaeger.thrift over HTTP (collector).
    #   - https: Sends spans using jaeger.thrift over HTTPS (collector).
    #   - udp: Sends spans using jaeger.thrift compact over UDP (agent).
    protocol = http

    # Enable or disable including tags from kamon.environment as labels
    include-environment-tags = yes
  }
}
